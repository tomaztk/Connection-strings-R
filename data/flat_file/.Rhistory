# Read a csv file, getting data from sample.csv file
data_json <- read.csv("sample.json", header = TRUE, sep = ",", dec = ".")
library(jsonlite)
library(purrr)
data_json <- fromJSON("sample.json")
View(data_json)
data_json <- fromJSON("sample.json", simplifyVector = FALSE)
View(data_json)
listviewer::jsonedit(data_json, height = "800px", mode = "view")
install.packages("listviewer")
#install.packages("listviewer")
library(listviewer)
data_json <- fromJSON("sample.json", simplifyVector = FALSE)
View(data_json)
listviewer::jsonedit(data_json, height = "800px", mode = "view")
listviewer::jsonedit(data_json, height = "400px", mode = "view")
jsonedit(data_json, height = "400px", mode = "view")
input_list <- list(1, 2, 4, -5, 'oh no', 10, 0)
for(input_list in inputs) {
print(paste("log of", input_list, "=", log(input_list)))
}
input_list <- list(1, 2, 4, -5, 'oh no', 10, 0)
for(inp in input_list) {
print(paste("log of", inp, "=", log(inp)))
}
input_list <- list(1, 2, 4, -5, 'oh no', 10, 0)
for(inp in input_list) {
print(paste("log of", inp, "=", power(inp)))
}
input_list <- list(1, 2, 4, -5, 'oh no', 10, 0)
for(inp in input_list) {
print(paste("Power of 2 of", inp, "=", power(inp,2)))
}
input_list <- list(1, 2, 4, -5, 'oh no', 10, 0)
for(inp in input_list) {
print(paste("Power of 2 of", inp, "=", inp**2))
}
for(inp in input_list) {
try(print(paste("Power of 2 of", inp, "=", inp**2)))
}
input_list <- list(1, 2, 4, -5, 'oh no', 10, 0)
for(inp in input_list) {
try(print(paste("Power of 2 of", inp, "=", inp**2)))
}
# Try
input_list_try <- list(1, 2, 4, -5, 'oh no', 10, 0)
for(inp in input_list_try) {
try(print(paste("Power of 2 of", inp, "=", inp**2)), silent = TRUE)
}
# Try
input_list_try <- list(1, 2, 4, -5, 'oh no', 10, 0)
# without silent
for(inp in input_list_try) {
try(print(paste("Power of 2 of", inp, "=", inp**2)))
}
TC_fun = function(x) {
tryCatch(x**2,
warning = function(w) {print(paste("negative argument", x));
-inp**x},
error = function(e) {print(paste("non-numeric argument", x));
NaN})
}
for(input in input_list_try) {
print(paste("TryCatch function of", input, "=", TC_fun(input)))
}
nof_tries <- 21
if (nof_tries > 21) stop("You are out of tries")
try(if (nof_tries > 21) stop("You are out of tries"))
nof_tries <- 21
if (nof_tries > 21) {
print(nof_tries)
stop("You are out of tries"))
}
nof_tries <- 21
if (nof_tries > 21)
print(nof_tries)
stop("You are out of tries"))
nof_tries <- 21
if (nof_tries > 11) {
print(nof_tries)
stop("You are out of tries"))
}
max <- 21
i <- 1
if (max > i) {
print(i)
stop("You are out of tries"))
}
max <- 21
i <- 1
if (max > i) {
print(i)
stop("You are out of tries")
}
min <- 10
max <- 22
if (max > min)
stop("max > min")
print("We are good")
test <- function(min, max) {
if (max > min)
stop("max > min")
print("We are good")
}
test <- function(min, max) {
if (max > min)
stop("max > min")
print("We are good")
}
test(10,22)
test(22,10)
# stop()
test <- function(min, max) {
if (max < min)
stop("max < min")
print("We are good; max > min")
}
test(22,10)
# stop()
test_stop <- function(min, max) {
if (max < min)
stop("Upsii: max < min")
print("We are good: max > min")
}
test_stop(22,10)
test_stop(10,22)
test_warning <- function(min, max){
if(max < min) {
warning("Warning, warning. Max < Min")
}
if(max > min) {
message("Well, max > min")
}
}
test_warning <- function(min, max){
if(max < min) {
warning("Warning, warning. Max < Min")
}
if(max > min) {
message("Well, max > min")
}
}
test_warning(10,20)
test_warning(20,10)
supressWarnings(test_warning(20,10))
suppressWarnings(test_warning(20,10))
suppressWarnings(test_warning(10,12))
test_warning(10,20)
test_warning(20,10)
suppressWarnings(test_warning(20,10))
suppressWarnings(test_warning(10,12))
input_list <- c(1, 2, 3, -50, 'R Rules', 10, 0)
for(inp in input_list) {
print(paste("Power of 2 of", inp, "=", inp**2))
}
input_list <- list(1, 2, 3, -50, 'R Rules', 10, 0)
for(inp in input_list) {
print(paste("Power of 2 of", inp, "=", inp**2))
}
input_list <- c(1, 2, 3, -50, 'R Rules', 10, 0)
for(inp in input_list) {
print(inp)
#  print(paste("Power of 2 of", inp, "=", inp**2))
}
input_list <- c(1, 2, 3, -50, 'R Rules', 10, 0)
for(inp in input_list) {
print(inp)
print(paste("po", inp, "=", inp+1))
#  print(paste("Power of 2 of", inp, "=", inp**2))
}
input_list <- list(1, 2, 3, -50, 'R Rules', 10, 0)
for(inp in input_list) {
print(inp)
print(paste("po", inp, "=", inp+1))
#  print(paste("Power of 2 of", inp, "=", inp**2))
}
#using list, instead of
input_list <- list(1, 2, 3, -50, 'R Rules', 10, 0)
#using list, instead of
input_list <- c(1, 2, 3, -50, 'R Rules', 10, 0)
for(inp in input_list) {
print(inp)
print(paste("po", inp, "=", inp+1))
#  print(paste("Power of 2 of", inp, "=", inp**2))
}
# using list, instead of vector of character
# so output control is better
#input_list <- c(1, 2, 3, -50, 'R Rules', 10, 0)
input_list <- list(1, 2, 3, -50, 'R Rules', 10, 0)
for(inp in input_list) {
print(inp)
print(paste("po", inp, "=", inp+1))
#  print(paste("Power of 2 of", inp, "=", inp**2))
}
# using list, instead of vector of character
# so output control is better
#input_list <- c(1, 2, 3, -50, 'R Rules', 10, 0)
input_list <- list(1, 2, 3, 'R Rules', 10, -500, 1.23, c(99:101))
for(inp in input_list) {
print(inp)
print(paste("po", inp, "=", inp+1))
#  print(paste("Power of 2 of", inp, "=", inp**2))
}
# using list, instead of vector of character
# so output control is better
input_list <- list(1, 2, 3, 'R Rules', 10, -500, 1.23, 0, 1024)
for(inp in input_list) {
print(paste("Power of 2 of", inp, "=", inp**2))
}
# using list, instead of vector of character
# so output control is better
input_list <- list(1, 2, 3, 'R Rules', 10, -500, 1.23, 0, 1024)
for(inp in input_list) {
print(paste("Power to the 2 of", inp, "is: ", inp**2))
}
# Try
# with silent ON
for(inp in input_list) {
try(print(paste("Power to the 2 of", inp, "is: ", inp**2)), silent = TRUE)
}
# without silent
for(inp in input_list) {
try(print(paste("Power to the 2 of", inp, "is: ", inp**2)))
}
gc()
# stop()
test_stop <- function(min, max) {
if (max < min)
stop("Upsii: max < min")
print("We are good: max > min")
}
test_stop(22,10)
test_stop(10,22)
test_warning <- function(min, max){
if(max < min) {
warning("Warning, warning. Max < Min")
}
if(max > min) {
message("Well, max > min")
}
}
test_warning(10,20)
test_warning(20,10)
suppressWarnings(test_warning(20,10))
suppressWarnings(test_warning(10,12))
# using list, instead of vector of character
# so output control is better
input_list <- list(1, 2, 3, 'R Rules', 10, -500, 1.23, 0, 1024)
for(inp in input_list) {
print(paste("Power to the 2 of", inp, "is: ", inp**2))
}
# Try
# with silent ON
for(inp in input_list) {
try(print(paste("Power to the 2 of", inp, "is: ", inp**2)), silent = TRUE)
}
# without silent
for(inp in input_list) {
try(print(paste("Power to the 2 of", inp, "is: ", inp**2)))
}
TC_fun = function(x) {
tryCatch(x**2,
warning = function(w) {print(paste("negative argument", x));
-inp**x},
error = function(e) {print(paste("non-numeric argument", x));
NaN})
}
for(input in input_list_try) {
print(paste("TryCatch function of", input, "=", TC_fun(input)))
}
TC_fun = function(x) {
tryCatch(x**2,
warning = function(w) {print(paste("negative argument", x));
-inp**x},
error = function(e) {print(paste("non-numeric argument", x));
NaN})
}
for(input in input_list) {
print(paste("TryCatch function of", input, "=", TC_fun(input)))
}
stopifnot(22 == 20)
m <- matrix(c(1,3,3,1), 2, 2)
stopifnot(m == t(m), diag(m) == rep(1, 2)) # all(.) |=>  TRUE
stopifnot(is.character(input_list[2]))
stopifnot(is.character(input_list[4]))
input_list[4]
stopifnot(is.numeric (input_list[2]))
stopifnot(is.integer (input_list[2]))
input_list <- c(20,25,30, "35", 40)
stopifnot(is.integer (input_list[2]))
input_list[2]
is.integer(input_list[2])
is.numeric(input_list[2])
stopifnot(is.integer (input_list[2]))
input_list <- 23
stopifnot(is.integer (input_list))
stopifnot(is.integer(input_list))
#stopIfnot()
input_list <- 23 # c(20,25,30, "35", 40)
stopifnot(is.integer(input_list))
#stopIfnot()
input <- 23
stopifnot(is.integer(input))
res <- stopifnot(is.integer(input))
res
stopifnot(1 == 1, all.equal(pi, 3.14159265), 1 < 2) # all TRUE
input_statements <- c(10==10, 22 > 10)
stopifnot(input_statements)
#stopIfnot()
input_numbers <- c(23,22,25)
stopifnot(is.numeric(input))
input_pi <- 3.15 #this is not a PI number!
stopifnot(all.equal(pi, input_pi))
power_calculation <- function(x,y){
tryCatch(
expr = {
message(x**y)
message("Successfully calculated x to power of y.")
},
error = function(e){
message('Caught an error!')
print(e)
},
warning = function(w){
message('Caught an warning!')
print(w)
},
finally = {
message('Finished.  .')
}
)
}
power_calculation(10,3)
power_calculation(10,-1)
get_numbers <- function(a,b){
stopifnot(as.numeric(a,b))
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers(5,2)
get_numbers <- function(a,b){
stopifnot(is.numeric(a,b))
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers(5,2)
#stopIfnot()
input_numbers <- c(23,22,25)
stopifnot(is.numeric(input)) #all TRUE
#stopIfnot()
input_numbers <- c(23,22,25)
stopifnot(is.numeric(input_numbers)) #all TRUE
get_numbers(5,2)
get_numbers <- function(a,b){
stopifnot(is.numeric(a))
stopifnot(is.numeric(b))
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers(5,2)
get_numbers <- function(a,b){
#  stopifnot(is.numeric(a))
#  stopifnot(is.numeric(b))
if (!is.numeric(a)) {
abort_bad_argument("a", must = "be numeric", not = x)
}
if (!is.numeric(b)) {
abort_bad_argument("b", must = "be numeric", not = base)
}
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers <- function(a,b){
#  stopifnot(is.numeric(a))
#  stopifnot(is.numeric(b))
if (!is.numeric(a)) {
warning("a", must = "be numeric", not = x)
}
if (!is.numeric(b)) {
warning("b", must = "be numeric", not = base)
}
base::log(x, base = b)
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers <- function(a,b){
#  stopifnot(is.numeric(a))
#  stopifnot(is.numeric(b))
if (!is.numeric(a)) {
warning("a", must = "be numeric", not = a)
}
if (!is.numeric(b)) {
warning("b", must = "be numeric", not = b)
}
base::log(x, base = b)
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers <- function(a,b){
#  stopifnot(is.numeric(a))
#  stopifnot(is.numeric(b))
if (!is.numeric(a)) {
warning("a", must = "be numeric", not = a)
}
if (!is.numeric(b)) {
warning("b", must = "be numeric", not = b)
}
base::log(a, base = b)
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers(5,2)
get_numbers <- function(a,b){
#  stopifnot(is.numeric(a))
#  stopifnot(is.numeric(b))
if (!is.numeric(a)) {
warning("a", must = "be numeric", not = a)
}
if (!is.numeric(b)) {
warning("b", must = "be numeric", not = b)
}
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers(5,2)
power_calculation <- function(x,y){
tryCatch(
expr = {
message(x**y)
message("Successfully calculated x to power of y.")
},
error = function(e){
message('Caught an error!')
print(e)
},
warning = function(w){
message('Caught an warning!')
print(w)
},
finally = {
message('... Program execution finished ...')
}
)
}
power_calculation(10,3)
get_numbers <- function(a,b){
#  stopifnot(is.numeric(a))
#  stopifnot(is.numeric(b))
if (!is.numeric(a)) {
warning("a", must = "be numeric", not = a)
}
if (!is.numeric(b)) {
warning("b", must = "be numeric", not = b)
}
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers <- function(a,b){
#  stopifnot(is.numeric(a))
#  stopifnot(is.numeric(b))
if (!is.numeric(a)) {
warning("a must be a numeric")
}
if (!is.numeric(b)) {
warning("b must be a numeric")
}
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers <- function(a,b){
#  stopifnot(is.numeric(a))
#  stopifnot(is.numeric(b))
if (!is.numeric(a)) {
warning("a must be a numeric")
}
if (!is.numeric(b)) {
warning("b must be a numeric")
}
stopifnot(is.numeric(a) & is.numeric(b))
power_calculation(a,b)
}
get_numbers("a",2)
get_numbers(5,2)
#Set working directory
setwd("/Users/tomazkastrun/Documents/tomaztk_github/Connection-strings-R/data/flat_file")
# Read a txt file, reading data from sample.txt file
data_txt <- read.delim("sample.txt", header = TRUE, sep = "\t", dec = ".")
# Read a txt file, reading data from sample.txt file
data_txt <- read.delim("sample.txt", header = TRUE, sep = "\t", dec = ".")
# Read a csv file, getting data from sample.csv file
data_csv <- read.csv("sample.csv", header = TRUE, sep = ",", dec = ".")
#install.packages("jsonlite")
#install.packages("listviewer")
library(jsonlite)
library(listviewer)
# get data
data_json <- fromJSON("sample.json", simplifyVector = FALSE)
# View JSON data
View(data_json)
listviewer::jsonedit(data_json, height = "400px", mode = "view")
install.packages('RPostgreSQL')
install.packages('RPostgres')
con<-dbConnect(RPostgres::Postgres())
library('RPostgres')
con<-dbConnect(RPostgres::Postgres())
library('RPostgres')
install.packages('SQLlite')
install.packages("RMySQL")
#install.packages("RMySQL")
library(RMySQL)
library(DBI)
mydb = dbConnect(MySQL(), user='user', password='password', dbname='database_name', host='host')
